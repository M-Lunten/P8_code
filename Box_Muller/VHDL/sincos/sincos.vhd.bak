library ieee;
use ieee.std_logic_1164.all;  
use ieee.std_logic_unsigned.all;

entity sincos is 
port(
	i_clock : in std_logic;
	reset : in std_logic;
	data : in std_logic_vector(11 downto 0);
	sinOut : out std_logic_vector(15 downto 0);
	cosOut : out std_logic_vector(15 downto 0)
	);
end sincos;

architecture Behavioural of sincos is
	
	component sincosLUT is
	port(
		address_a		: IN STD_LOGIC_VECTOR (9 DOWNTO 0);
		address_b		: IN STD_LOGIC_VECTOR (9 DOWNTO 0);
		clock		: IN STD_LOGIC  := '1';
		q_a		: OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
		q_b		: OUT STD_LOGIC_VECTOR (15 DOWNTO 0)
	);
	end component;

	signal m0 : std_logic := '0';
	signal n0 : std_logic := '0';
	signal m1 : std_logic;
	signal n1 : std_logic;
	signal m2 : std_logic;
	signal n2 : std_logic;
	signal m3 : std_logic;
	signal n3 : std_logic;
	signal m4 : std_logic;
	signal n4 : std_logic;
	signal d : std_logic_vector(9 downto 0) := "0000000000";
	signal dSin : std_logic_vector(9 downto 0) := "0000000000";
	signal dCos : std_logic_vector(9 downto 0) := "0000000000";
	signal dSinpLUT : std_logic_vector(9 downto 0) := "0000000000";
	signal dCospLUT : std_logic_vector(9 downto 0) := "0000000000";
	signal dSinOut : std_logic_vector(15 downto 0) := "0000000000000000";
	signal dCosOut : std_logic_vector(15 downto 0) := "0000000000000000";
	
	signal sinPOut : std_logic_vector(15 downto 0);
	signal cosPOut : std_logic_vector(15 downto 0);
	
	
	
	begin
	
		c1: sincosLUT port map(dSinpLUT, dCospLUT, i_clock, dSinOut, dCosOut);
		
		process(i_clock) is 
			begin
				if rising_edge(i_clock) then
					m0 <= data(11);
					n0 <= data(10);
					d <= data(9 downto 0);
					dSin <= d;
					dCos <= d;
					
					if m0='1' then
						dSinpLUT <= not(d) + 1;
					else
						dSinpLUT <= d;
					end if;
					
					if m0='0' and n0='0' then 
						dCospLUT <= not(d) + 1;
					elsif m0='0'and n0='1' then
						dCospLUT <= not(d) + 1;
					else 
						dCospLUT <= d;
					end if;
					
					m1 <= m0;
					n1 <= n0;
					
					m2 <= m1;
					n2 <= n1;
					
					m3 <= m2;
					n3 <= n2;
					
					if n3='1' then 
						sinOut <= not(dSinOut) + 1;
					elsif n3 = '0'
						sinOut <= dSinOut;
					end if;
					
					if n3='1' and m3='0' then 
						cosOut <= not(dCosOut) + 1;
					elsif n3='0' and m3='1' then 
						cosOut <= not(dCosOut) + 1;
					else 
						cosOut <= dcosOut;
					end if;
					
					m4 <= m3;
					n4 <= n3;
					
				
					
				end if;

		end process;
end architecture;
	